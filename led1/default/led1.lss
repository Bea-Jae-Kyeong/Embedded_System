
led1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c0  00800100  0000022c  000002c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  008002c0  008002c0  00000480  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000104  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000029d  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000103  00000000  00000000  00000841  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f8  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000164  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000028  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_10>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_14>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e2       	ldi	r30, 0x2C	; 44
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 3c       	cpi	r26, 0xC0	; 192
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	12 e0       	ldi	r17, 0x02	; 2
  b4:	a0 ec       	ldi	r26, 0xC0	; 192
  b6:	b2 e0       	ldi	r27, 0x02	; 2
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 3c       	cpi	r26, 0xC8	; 200
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 de 00 	call	0x1bc	; 0x1bc <main>
  c6:	0c 94 14 01 	jmp	0x228	; 0x228 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_14>:
INT16U total_song_size;
INT8U default_BPM; //48 for harry potter, 120 for zelda,

//소리 재생용 인터럽트
ISR(TIMER1_OVF_vect)
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	0b b6       	in	r0, 0x3b	; 59
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24
  de:	ef 93       	push	r30
  e0:	ff 93       	push	r31
if(state==0xff){
  e2:	80 91 c7 02 	lds	r24, 0x02C7
  e6:	8f 3f       	cpi	r24, 0xFF	; 255
  e8:	11 f4       	brne	.+4      	; 0xee <__vector_14+0x20>
PORTB = 0x00;
  ea:	18 ba       	out	0x18, r1	; 24
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__vector_14+0x24>
state = ~state;
}
else{
PORTB = 0x10;
  ee:	80 e1       	ldi	r24, 0x10	; 16
  f0:	88 bb       	out	0x18, r24	; 24
state = ~state;
  f2:	80 91 c7 02 	lds	r24, 0x02C7
  f6:	80 95       	com	r24
  f8:	80 93 c7 02 	sts	0x02C7, r24
}
TCNT1H = timer1_key_data_high[note_key[notes]];
  fc:	e0 91 c2 02 	lds	r30, 0x02C2
 100:	f0 91 c3 02 	lds	r31, 0x02C3
 104:	e8 52       	subi	r30, 0x28	; 40
 106:	fe 4f       	sbci	r31, 0xFE	; 254
 108:	e0 81       	ld	r30, Z
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	ea 5d       	subi	r30, 0xDA	; 218
 10e:	fe 4f       	sbci	r31, 0xFE	; 254
 110:	80 81       	ld	r24, Z
 112:	8d bd       	out	0x2d, r24	; 45
TCNT1L = timer1_key_data_low[note_key[notes]];
 114:	e0 91 c2 02 	lds	r30, 0x02C2
 118:	f0 91 c3 02 	lds	r31, 0x02C3
 11c:	e8 52       	subi	r30, 0x28	; 40
 11e:	fe 4f       	sbci	r31, 0xFE	; 254
 120:	e0 81       	ld	r30, Z
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	e1 58       	subi	r30, 0x81	; 129
 126:	fe 4f       	sbci	r31, 0xFE	; 254
 128:	80 81       	ld	r24, Z
 12a:	8c bd       	out	0x2c, r24	; 44
}
 12c:	ff 91       	pop	r31
 12e:	ef 91       	pop	r30
 130:	8f 91       	pop	r24
 132:	0f 90       	pop	r0
 134:	0b be       	out	0x3b, r0	; 59
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <__vector_10>:

//박자 재생용 인터럽트
ISR(TIMER2_OVF_vect) //0.0005초마다 인터럽트 발생
{
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	0b b6       	in	r0, 0x3b	; 59
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
count++;
 156:	80 91 c0 02 	lds	r24, 0x02C0
 15a:	8f 5f       	subi	r24, 0xFF	; 255
 15c:	80 93 c0 02 	sts	0x02C0, r24
if(count==120) //0.0625초 ->1/16초 ==> 16분음마다 이 카운터가 돌아감
 160:	80 91 c0 02 	lds	r24, 0x02C0
 164:	88 37       	cpi	r24, 0x78	; 120
 166:	e9 f4       	brne	.+58     	; 0x1a2 <__vector_10+0x62>
{
count = 0;
 168:	10 92 c0 02 	sts	0x02C0, r1
beat++;
 16c:	80 91 c1 02 	lds	r24, 0x02C1
 170:	8f 5f       	subi	r24, 0xFF	; 255
 172:	80 93 c1 02 	sts	0x02C1, r24
if(beat == note_size[notes])
 176:	90 91 c1 02 	lds	r25, 0x02C1
 17a:	e0 91 c2 02 	lds	r30, 0x02C2
 17e:	f0 91 c3 02 	lds	r31, 0x02C3
 182:	e2 5f       	subi	r30, 0xF2	; 242
 184:	fd 4f       	sbci	r31, 0xFD	; 253
 186:	80 81       	ld	r24, Z
 188:	98 17       	cp	r25, r24
 18a:	59 f4       	brne	.+22     	; 0x1a2 <__vector_10+0x62>
{
notes++;
 18c:	80 91 c2 02 	lds	r24, 0x02C2
 190:	90 91 c3 02 	lds	r25, 0x02C3
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	90 93 c3 02 	sts	0x02C3, r25
 19a:	80 93 c2 02 	sts	0x02C2, r24
beat = 0;
 19e:	10 92 c1 02 	sts	0x02C1, r1
}
}
TCNT2 = 48;
 1a2:	80 e3       	ldi	r24, 0x30	; 48
 1a4:	84 bd       	out	0x24, r24	; 36
}
 1a6:	ff 91       	pop	r31
 1a8:	ef 91       	pop	r30
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	0f 90       	pop	r0
 1b0:	0b be       	out	0x3b, r0	; 59
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <main>:

int main(void)
{
/* Replace with your application code */
DDRB = 0x10; //버저 출력 PB4
 1bc:	80 e1       	ldi	r24, 0x10	; 16
 1be:	87 bb       	out	0x17, r24	; 23
TCCR2 = 0x04;//0b00000100 64분주
 1c0:	84 e0       	ldi	r24, 0x04	; 4
 1c2:	85 bd       	out	0x25, r24	; 37
TCNT2 = 125;
 1c4:	8d e7       	ldi	r24, 0x7D	; 125
 1c6:	84 bd       	out	0x24, r24	; 36
TCCR1A = 0x00;
 1c8:	1f bc       	out	0x2f, r1	; 47
TCCR1B = 0x02;//0b00000010 8분주
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	8e bd       	out	0x2e, r24	; 46
TCNT1H = timer1_key_data_high[note_key[beat]+1];
 1ce:	e0 91 c1 02 	lds	r30, 0x02C1
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	e8 52       	subi	r30, 0x28	; 40
 1d6:	fe 4f       	sbci	r31, 0xFE	; 254
 1d8:	e0 81       	ld	r30, Z
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	ea 5d       	subi	r30, 0xDA	; 218
 1de:	fe 4f       	sbci	r31, 0xFE	; 254
 1e0:	81 81       	ldd	r24, Z+1	; 0x01
 1e2:	8d bd       	out	0x2d, r24	; 45
TCNT1L = timer1_key_data_low[note_key[beat]+1];
 1e4:	e0 91 c1 02 	lds	r30, 0x02C1
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	e8 52       	subi	r30, 0x28	; 40
 1ec:	fe 4f       	sbci	r31, 0xFE	; 254
 1ee:	e0 81       	ld	r30, Z
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	e1 58       	subi	r30, 0x81	; 129
 1f4:	fe 4f       	sbci	r31, 0xFE	; 254
 1f6:	81 81       	ldd	r24, Z+1	; 0x01
 1f8:	8c bd       	out	0x2c, r24	; 44

TIMSK = 0x44;//0b0100 0100
 1fa:	84 e4       	ldi	r24, 0x44	; 68
 1fc:	87 bf       	out	0x37, r24	; 55
sei();
 1fe:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 200:	20 e9       	ldi	r18, 0x90	; 144
 202:	31 e0       	ldi	r19, 0x01	; 1
while (1) 
{
	if(notes==sizeof(note_key)){
 204:	80 91 c2 02 	lds	r24, 0x02C2
 208:	90 91 c3 02 	lds	r25, 0x02C3
 20c:	c6 97       	sbiw	r24, 0x36	; 54
 20e:	d1 f7       	brne	.-12     	; 0x204 <main+0x48>
		notes = 0;
 210:	10 92 c3 02 	sts	0x02C3, r1
 214:	10 92 c2 02 	sts	0x02C2, r1
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	9f ef       	ldi	r25, 0xFF	; 255
 21c:	f9 01       	movw	r30, r18
 21e:	31 97       	sbiw	r30, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <main+0x62>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 222:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 224:	d9 f7       	brne	.-10     	; 0x21c <main+0x60>
 226:	ee cf       	rjmp	.-36     	; 0x204 <main+0x48>

00000228 <_exit>:
 228:	f8 94       	cli

0000022a <__stop_program>:
 22a:	ff cf       	rjmp	.-2      	; 0x22a <__stop_program>
